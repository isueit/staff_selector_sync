<?php

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\EntityStorageInterface;
use \Drupal\encrypt\Entity\EncryptionProfile;
use \Drupal\file\Entity\File;

/**
 * @file staff_profile_sync.module
 * Contains staff_profile_sync.module
 */

/**
 * Implements hook_cron()
 */
 function staff_profile_sync_cron() {
   //Run once per day, currently best option unless installing ultimate cron module
   if (\Drupal::config('staff_profile_sync.settings')->get('staff_profile_sync_last') < date('Ymd')) {
     staff_profile_sync_updater();
   }
 }

/**
 * Checks server and current staff directory for changes
 */
function staff_profile_sync_updater() {
  \Drupal::logger('staff_profile_sync')->info('Starting staff directory update');
  $netid_domain = "iastate.edu";
  $local_profiles = \Drupal::entityTypeManager()->getStorage('staff_profile_profile')->loadByProperties(['field_from_staff_directory' => true]);
  foreach ($local_profiles as $entity) {
    if ($entity->isPublished()) {
      $entity->setUnpublished();
      $entity->save();
    }
  }
  //Add untracked profiles after unpublishing tracked
  $local_profiles = array_merge($local_profiles, \Drupal::entityTypeManager()->getStorage('staff_profile_profile')->loadByProperties(['field_from_staff_directory' => false]));

  //Log reporting
  \Drupal::logger('staff_profile_sync')->info(count($local_profiles) . " Local staff_profile entities found. \r\n ");
  $updated = 0;//Does not mean they were changed, only found
  $created = 0;

  $config = \Drupal::config('staff_profile_sync.settings');

  $files = smugMugGetImages('isuextensionimages', 'Staff Photos');

  $encrypt_profile = EncryptionProfile::load($config->get('sync_encrypt_profile'));
  $myServer = $config->get('db_address');
  $myUser = $config->get('db_username');
  $myPass = \Drupal::service('encryption')->decrypt( $config->get('db_password'), $encryption_profile);
  $myDB = $config->get('db_database');

  $dbhandle = sqlsrv_connect($myServer, array("Database" => $myDB, "UID" => $myUser, "PWD" => $myPass))
    or die("Couldn't connect to SQL Server on $myServer");
  $results = sqlsrv_query($dbhandle, "dbo.Staff_GetFullDirectory");
  if ($results === false) {
    die( print_r(sqlsrv_errors(), true));
  }

  while ($profile = sqlsrv_fetch_object($results)) {
    $found = false;

    $taxonomy = taxonomy_term_load_multiple_by_name($profile->CountyName, 'counties-in-iowa');
    $base_county = (!empty($taxonomy) ? array_keys($taxonomy)[0] : "");

    $counties_array = explode(", ", $profile->CountiesServed);
    $counties_served = array();
    foreach ($counties_array as $county) {
      $taxon = taxonomy_term_load_multiple_by_name($county, 'counties-in-iowa');
      array_push($counties_served, (!empty($taxon) ? array_keys($taxon)[0] : ""));
    }


    foreach ($local_profiles as $entity) {
      $db_netid = explode("@",$profile->email)[0];

      //Allow match from netid or start of email
      if (($db_netid == $entity->label() && $entity->label() != "") || ($db_netid == explode("@", $entity->field_email->value)[0] && explode("@", $entity->field_email->value)[1] == $netid_domain)) {
        $entity->field_program_area_s_->value = $profile->ProgramAreas;
        //$entity->field_first_name->value = $profile->FirstName; # Can change
        $entity->field_last_name->value = $profile->LastName;
        $entity->field_email->value = $profile->email;
        $entity->field_address_1->value = $profile->Address1;
        $entity->field_address_2->value = $profile->Address2;
        $entity->field_city->value = $profile->City;
        $entity->field_state->value = $profile->State;
        $entity->field_zip->value = $profile->Zip;
        $entity->field_phone->value = $profile->Phone;
        //$entity->field_phone_2->value = $profile->Fax;
        $entity->field_extension_region->value = $profile->ExtensionArea;
        $entity->field_location->value = $profile->Location;
        $entity->field_department_id->value = $profile->DepartmentName;
        //$entity->field_position_title->value = $profile->UniversityTitle; # Can change
        $entity->field_base_county->value = $base_county;
        $entity->field_counties_served->value = $counties_served;

        //Add smugmug image if it exists, else clear field
        if (array_key_exists($db_netid, $files)) {
          $entity->field_profile_smugmug_image = $files[$db_netid]->ThumbnailUrl;
        } else {
          $entity->field_profile_smugmug_image = NULL;
        }

        $entity->field_from_staff_directory->value = true;
        $entity->setPublished();
        $entity->save();
        $found = true;
        $updated++;
      }
    }
    if (!$found) {
      $newEntity = \Drupal\staff_profile\Entity\StaffProfile::create([
        'field_first_name' => $profile->FirstName,
        'field_last_name' => $profile->LastName,
        'field_email' => $profile->email,
        'field_address_1' => $profile->Address1,
        'field_address_2' => $profile->Address2,
        'field_city' => $profile->City,
        'field_state' => $profile->State,
        'field_zip' => $profile->Zip,
        'field_phone' => $profile->Phone,
        //'field_phone_2' => $profile->Fax,
        'field_extension_region' => $profile->ExtensionArea,
        'field_location' => $profile->Location,
        'field_department_id' => $profile->DepartmentName,
        'field_position_title' => $profile->UniversityTitle,
        'field_program_area_s_' => $profile->ProgramAreas,
        'field_base_county' => $base_county,
        'field_counties_served' => $counties_served,
        'field_from_staff_directory' => true,
        'field_profile_smugmug_image' => (isset($files[$db_netid]) ? $files[$db_netid]->ThumbnailUrl : NULL),
      ]);
      $newEntity->setPublished();
      $newEntity->save();
      $created++;
    }
  }
  \Drupal::configFactory()->getEditable('staff_profile.settings')
    ->set('staff_profile_lastCron', date('Ymd'))
    ->save();
  \Drupal::logger('staff_profile_sync')->info("Staff Profile Sync Succeded. \r\n" . $updated . " Profiles updated and " . $created . " Profiles created.");
}

/**
 * Get request to smugmug API V2
 * Node: string- "/api/v2/<node type>/<node id>"
 * Cookie: string- "SMSESS=<cookie>"
 * API key: string, use key from config
 * Function: string "!<operation", see smugmug api
 */
function smugMugApiGET($node, $cookie, $api_key, $function = '') {
  $curl = curl_init('https://api.smugmug.com' . $node . $function . '?APIKey=' . $api_key);
  curl_setopt($curl, CURLOPT_HTTPGET, 1);
  curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_DIGEST);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  $header = array(
    'Accept: application/json',
    'cookie: ' . $cookie,
  );
  curl_setopt($curl, CURLOPT_HTTPHEADER, $header);

  $result = json_decode(curl_exec($curl));
  curl_close($curl);
  return $result;
}

/**
 * Unlock a node and get the cookie from smugmug for further requests
 * See smugMugApiGET for node, api key and function formatting
 * Password: string, use unlock password from config
 */
function smugMugApiPOST($node, $password, $api_key, $function = '!unlock') {
  $curl = curl_init('https://api.smugmug.com' . $node . $function . '?APIKey=' . $api_key);
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, array('Password' => $password));
  curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_DIGEST);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_HEADER, 1);
  $return = curl_exec($curl);
  preg_match('/^Set-Cookie:\s*([^\r\n]*)/mi', $return, $cookie);
  preg_match('/(SMSESS=)[a-z0-9\-]+/', $cookie[0], $smsess);
  curl_close($curl);
  return $smsess[0];
}

/**
 * Get images from a given Smugmug user and folder
 */
function smugMugGetImages($user, $folder) {
  $config = \Drupal::config('staff_profile_sync.settings');
  $encrypt_profile = EncryptionProfile::load($config->get('sync_encrypt_profile'));
  $api_key = \Drupal::service('encryption')->decrypt( $config->get('smug_mug_api_key'), $encrypt_profile);
  $password = \Drupal::service('encryption')->decrypt($config->get('smug_mug_password'), $encrypt_profile);

  //Get authentication cookie
  $cookie = smugMugApiPOST('/api/v2/user/' . $user, $password, $api_key, '!unlock');

  //Get user node id
  $userNode = smugMugApiGET('/api/v2/user/' . $user, $cookie, $api_key);
  $userNodeId = $userNode->Response->User->Uris->Node->Uri;

  //Get folder node id
  $staffFolder = smugMugApiGET($userNodeId, $cookie, $api_key, '!children');
  foreach ($staffFolder->Response->Node as $node) {
    if ($node->Name == $folder) {
      $staffFolderID = $node->Uri;
      break;
    }
  }

  //Get album node ids
  $albumNodes = smugMugApiGET($staffFolderID, $cookie, $api_key, '!children');
  foreach ($albumNodes->Response->Node as $album) {
    $albumNodeIds[] = $album->Uri;
  }

  //Create return images
  foreach ($albumNodeIds as $albumNodeId) {
    $albumId = smugMugApiGET($albumNodeId, $cookie, $api_key);
    $images = smugMugApiGET($albumId->Response->Node->Uris->Album->Uri, $cookie, $api_key, '!images');
    foreach ($images->Response->AlbumImage as $image) {
      $return[$image->Title] = $image;
    }
  }
  return $return;
}
